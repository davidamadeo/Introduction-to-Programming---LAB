#Banking
#David Amadeo 2201797304

class Account: #class for Account
    def __init__(self, balance): #initialize balance
        self.balance = float(balance)
    def getBalance(self): #function to get balance
        return self.balance
    def deposit(self, amount): #function to deposit
        self.balance += float(amount) #add the amount of deposit to the balance
        return True
    def withdraw(self, amount): #function to withdraw
        if self.balance >= float(amount): #if the amount is less than balance, transaction executed
            self.balance -= float(amount) #substract the amount of the withdrawl from the balance
            return True
        else:
            return False


class Customer:

    def __init__(self, fName, lName, Account): #initialize name and account
        self.fName = str(fName)
        self.lName = str(lName)
        self.myAccount = Account
    def getFirstName(self): #function to get first name
        return self.fName
    def getLastName(self): #function to get second name
        return self.lName
    def setAccount(self, Account): #function to set account
        self.myAccount = Account
    def getAccount(self): #function to get account
        return self.myAccount

class Bank:
    Customers = [] #initialize list of customers

    def __init__(self, bName): #initialize bank name
            self.bName = str(bName)
    def addCustomers(self, fName, lName): #function to add customer by their names
            self.Customers.append(Customer(fName, lName, Account(0))) #account balance starts from 0
    def getNumCustomers(self): #function to get number of customers
        return len(self.Customers)
    def getCustomers(self, fName, lName): #function to get customer
        ID = ''
        fullName = fName + lName #combine first and last name to a string
        for i in range(0, len(self.Customers)):
            fullNameCheck = self.Customers[i].getFirstName() + self.Customers[i].getLastName()
            if fullName == fullNameCheck: #if name in customer and the bank is the same
                ID = str(i) #print out index as string as Bank Number
                break
            else:
                ID = ''
        return ID


bankBCA = Bank('BCA')


while True:
    print('Welcome to {}\nWhat would you like to do?'.format(bankBCA.bName))
    action1 = input('1. Make a new account \n2. Get Your ID \n3. Deposit \n4. Withdraw\n5. Check Balance\n6. QUIT\nChoice: ') #input action

    if action1 == '1': #making a new account by entering the names
        input1 = input('Enter your first name: ')
        input2 = input('Enter your surname: ')
        bankBCA.addCustomers(input1, input2)
        print(input1, input2, 'has been registered')
    elif action1 == '2': #getting bank number using index
        input1 = input('Enter first name: ')
        input2 = input('Enter surname: ')
        numID = bankBCA.getCustomers(input1, input2)
        if not numID == '':
            print('{} â†’ {} {}'.format(numID, input1, input2))
        else:
            print('{} {} BANK BCA NUMBER NOT FOUND'.format(input1, input2))
    elif action1 == '3':
        input1 = int(input('Bank BCA Number: '))
        if input1 <= len(bankBCA.Customers):
            myBalance = bankBCA.Customers[input1].getAccount().getBalance()
            print('Your current balance is {}'.format(myBalance)) #displaying initial balance
            depositAmount = float(input('Amount: ')) #enter amount to be deposited
            bankBCA.getCustomers[input1].getAccount.deposit(depositAmount)
            currentBalance = bankBCA.getCustomers[input1].getAccount().getBalance()
            print('Transaction Completed, your current balance is {}'.format_map(currentBalance)) #displaying balance after transactions
        else:
            print('Bank BCA Number not found')
    elif action1 == '4':
        input1 = int(input('Bank BCA Number: '))
        if input1 <= len(bankBCA.Customers):
            myBalance = bankBCA.Customers[input1].getAccount().getBalance()
            print('Your current balance is {}'.format(myBalance)) #displaying initial balance
            withdrawAmount = float(input('Amount: ')) #enter amount to be withdrawn
            if withdrawAmount <= myBalance:
                bankBCA.getCustomer[input1].getAccount().withdraw(withdrawAmount)
                currentBalance = bankBCA.getCustomers[input1].getAccount().getBalance()
                print('Transaction Completed, your current balance is {}'.format(currentBalance)) #displaying balance after transactions
            else:
                print('Your balance is not enough to make this transaction')
        else:
            print('Bank BCA Number not found')
    elif action1 == '5':
        input1 = int(input('Bank BCA Number: ')) #enter the bank number (index)
        if input1 <= len(bankBCA.Customers):
            myBalance = bankBCA.Customers[input1].getAccount().getBalance() #taking info from parent class to children class
            print('Your current balance is {}'.format(myBalance)) #print out balance
    elif action1 == '6': #option to quit
        quit()
